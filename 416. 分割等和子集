# https://leetcode.cn/problems/partition-equal-subset-sum/
class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        total_sum = sum(nums)
        if total_sum % 2 != 0:
            return False
        half = total_sum // 2
        # dp[i]表示当前背包容量，当背包容量为half恰好满了的时候说明可以恰好分为两部分
        # 这里的递推关系同样是取能放进来的数字的最大值;因为背包容量最大也就到half
        dp = [0] * (half + 1)
        for num in nums:
            for j in range(half, num - 1, -1):
                dp[j] = max(dp[j], dp[j - num] + num)
                if dp[-1] == half:
                    return True
        return False
