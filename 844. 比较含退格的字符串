# https://leetcode.cn/problems/backspace-string-compare/description/
# 使用栈，非#存入，如果是#就弹出，注意栈空的情况即可
class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        def stack_(s:str) -> str:
            res = list()
            for letter in s:
                if letter != '#':
                    res.append(letter)
                elif res:
                    res.pop()
            return "".join(res)
        return stack_(s) == stack_(t)
# 使用双指针
class Solution:
    def backspaceCompare(self, s: str, t: str) -> bool:
        i, j = len(s) - 1, len(t) - 1
        skip_s = skip_t = 0
        while i >= 0 or j >= 0:
            while i >= 0:
            # 这里的逻辑是倒叙往回看，如果这个元素是‘#’skip就更新，同时指针左移，跳过这个元素
                if s[i] == '#':
                    skip_s += 1
                    i -= 1
            # 如果这个元素不是‘#’，且此时skip不为零，开始skip,积累了多少skip就跳过多少元素
                elif skip_s > 0:
                    skip_s -= 1
                    i -= 1
            # 如果这个元素不是‘#’且没有skip,不需要跳过元素，则跳出循环，此时应该停在了新的最后输出的结果一个元素
                else:
                    break
            while j >= 0:
            # 一样的逻辑
                if t[j] == '#':
                    skip_t += 1
                    j -= 1
                elif skip_t > 0:
                    skip_t -= 1
                    j -= 1
                else:
                    break
            # 这里的逻辑是倒叙往回看，如果这个元素是‘#’skip就更新，同时指针左移，跳过这个元素
            if i >= 0 and j >= 0:
                if s[i] != t[j]:
                    return False
           # 如果只有一个没处理完，另一个处理完了
            elif i >= 0 or j >= 0:
                return False
            i -= 1
            j -= 1
        return True
