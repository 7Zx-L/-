# https://leetcode.cn/problems/edit-distance/description/
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        # 感觉情况比较多，先不细分
        # dp[i][j]表示将word1截至i-1的子串转换为word2截至j-1的子串使用的最小操作数是dp[i][j]
        dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]
        for i in range(len(word1) + 1):
            dp[i][0] = i
        for j in range(len(word2) + 1):
            dp[0][j] = j
        for i in range(1, len(word1) + 1):
            for j in range(1, len(word2) + 1):
                if word1[i - 1] == word2[j - 1]:
                    # 这种情况比较简单，直接看前一位就行
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    # 这里得分情况讨论了
                    # 操作有三种，操作都是对word1进行的
                    # 对一个子串做删除操作和对另一个字串做插入操作使之相同的操作数是一样的
                    # 简化后剩下了 删除word1或者删除word2(插入word1)或者替换word1元素三种
                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1
        return dp[-1][-1]
