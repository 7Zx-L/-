# https://leetcode.cn/problems/distinct-subsequences/
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        # dp[i][j]表示s截至i - 1的子串 出现的 t截至j - 1的子串的次数
        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]
        for i in range(len(s)):
            if s[i] == t[0]:
                dp[i][0] = 1 
        for i in range(1, len(s) + 1):
            for j in range(1, len(t) + 1):
                # 主要是当前比较元素的元素相同的情况的递推公式，感觉比较难理解
                # 当前比较元素相同时，因为这两个最新元素是相等的了，对于s的子串来说由两部分构成
                # 一部分是原本就存在的，一部分是加了这个元素后新出现的
                # 即加入当前元素之前，旧的s的子串就可以包括这个加入了当前元素的新的t子串
                # 加入这个元素前原本就存在的个数是dp[i - 1][j]
                # 至于加入当前元素后新产生的个数则是 dp[i - 1][j - 1]
                if s[i - 1] == t[j - 1]:
                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]
                else:
                    dp[i][j] = dp[i - 1][j]
        return dp[-1][-1]
