# https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv/description/
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        dp = [[0] * (2 * k + 1) for _ in range(len(prices))]
        # dp[i][1],dp[i][3],dp[i][5],dp[i][7]...是对应的持有，dp[i][2]，dp[i][4],dp[i][6],dp[i][8]...是对应的不持有
        for i in range(1, 2 * k, 2):
            dp[0][i] = -prices[0]
        for i in range(1, len(prices)):
            for j in range(1, 2 * k + 1):
                if j % 2 == 0:
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] + prices[i])
                elif j % 2 != 0:
                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1] - prices[i])
        return dp[-1][-1]
