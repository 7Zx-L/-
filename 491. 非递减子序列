# https://leetcode.cn/problems/non-decreasing-subsequences/description/
class Solution:
    def __init__(self):
        self.result = []
        self.path = []
    def backtracking(self, nums, start):
        if len(self.path) > 1:
            self.result.append(self.path[:])
        used = set()
        for i in range(start, len(nums)):
            if nums[i] in used:
                continue
            if not self.path or nums[i] >= self.path[-1]:
                used.add(nums[i])
                self.path.append(nums[i])
                self.backtracking(nums, i + 1)
                self.path.pop()
    def findSubsequences(self, nums: List[int]) -> List[List[int]]:
        self.backtracking(nums, 0)
        return self.result
