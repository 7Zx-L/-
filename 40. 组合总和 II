# https://leetcode.cn/problems/combination-sum-ii/description/
class Solution:
    def __init__(self):
        self.result = []
        self.path = []
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        candidates.sort()
        self.backtracking(candidates, 0, target)
        return self.result
    def backtracking(self, candidates, start, target):
        if target == 0:
            self.result.append(self.path[:])
            return
        for i in range(start, len(candidates)):
            if candidates[i] == candidates[i - 1] and i > start:
                continue
            if target < 0:
                break
            self.path.append(candidates[i])
            target -= candidates[i]
            self.backtracking(candidates, i + 1, target)
            target += candidates[i]
            self.path.pop()
