# BF
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        min_length = float('inf')
        for i in range(len(nums)):
            cur_sum = 0
            for j in range(i, len(nums)):
                cur_sum += nums[j]
                if cur_sum >= target:
                    min_length = min(j - i + 1, min_length)
                    break
        return min_length if min_length != float('inf') else 0
# 滑动窗口
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        left = right = 0
        cur_sum = 0
        min_length = float('inf')
        while right < len(nums):
            cur_sum += nums[right]
            while cur_sum >= target:
                min_length = min(min_length, right - left + 1)
                cur_sum -= nums[left]
                left += 1
            right += 1
        return min_length if min_length != float('inf') else 0
