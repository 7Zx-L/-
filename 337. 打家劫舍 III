# https://leetcode.cn/problems/house-robber-iii/description/
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    # dp[0] 表示不偷当前结点能获得的最大价值；dp[1]表示偷当前结点能获得的最大价值
    def rob(self, root: Optional[TreeNode]) -> int:
        result = self.traverse(root)
        return max(result)
    def traverse(self, node):
        if not node:
            return(0, 0)
        left = self.traverse(node.left)
        right = self.traverse(node.right)
        # 考虑当前节点，如果偷
        value_one = node.val + left[0] + right[0]
        # 如果不偷
        value_two = max(left[0], left[1]) + max(right[0], right[1])
        return (value_two, value_one)
