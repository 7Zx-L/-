# https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/description/
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        max_pro = 0
        min_price = float('inf')
        # dp[i] 表示 第 i 天能获得的最大利润
        dp = [0] * len(prices)
        for i in range(len(prices)):
            min_price = min(min_price, prices[i])
            max_pro = max(max_pro, prices[i] - min_price)
        return max_pro
# 动态规划解法
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # dp[i][0]表示第i天持有股票的现金；dp[i][1]表示第i天没有持有股票的现金
        dp = [[0, 0] for _ in range(len(prices))]
        dp[0][0] = -prices[0]
        dp[0][1] = 0
        for i in range(1, len(prices)):
            # dp[i - 1][0]表示延续前面一天的持有状态，此时利润是不变的
            # 另一种持有的情况是，从没有持有变到持有，即买入的过程
            dp[i][0] = max(dp[i - 1][0], -prices[i])
            # 不持有是类似的分析方法
            dp[i][1] = max(dp[i - 1][1], prices[i] + dp[i - 1][0])
        return dp[-1][1]
